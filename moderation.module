<?php
// $Id$

/**
 * @file
 * Moderation - nodes and comments queue
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 */

/**
 * Implements HOOK_views_api().
 */
function moderation_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'moderation') . '/includes',
  );
}

/**
 * Implement HOOK_menu().
 */
function moderation_menu() {
  $items = array();
  $items['node/%/log'] = array(
    'title' => 'Log',
    'page callback' => 'moderation_log',
    'page arguments' => array('node', 1),
    'access arguments' => array('access node queue'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'moderation.pages.inc',
  );
  $items['moderation/%/%/%/%'] = array(
    'page callback' => 'moderation_callback_switch',
    'page arguments' => array(1, 2, 3, 4),
    'access callback' => 'moderation_moderation_access_callback',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'moderation.pages.inc',
  );
  $items['admin/content/node/log'] = array(
    'title' => 'Log',
    'page callback' => 'moderation_log',
    'access arguments' => array('access node queue'),
    'page arguments' => array('node'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'moderation.pages.inc',
    'weight' => 1,
  );
  $items['admin/content/comment/log'] = array(
    'title' => 'Log',
    'page callback' => 'moderation_log',
    'page arguments' => array('comment'),
    'access arguments' => array('access comment queue'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'moderation.pages.inc',
    'weight' => 1,
  );
  return $items;
}

/**
 * Implement HOOK_perm().
 */
function moderation_perm() {
  return array(
    'administer moderation',
    'moderate content',
    'access thread queue',
    'access node queue',
    'access flag queue',
    'access comment queue',
  );
}

/**
 * Implement HOOK_nodeapi().
 */
function moderation_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  global $user;
  switch ($op) {
    case 'presave':
      $status = moderation_get_status('node', $node->nid, 'moderate');
      if ($status != $node->moderate) {
        moderation_update_moderation('node', $node->nid, $node->moderate);
        moderation_insert_moderation_log('node', $node->nid, $node->moderate, 'moderate', $user);
      }
      break;
    case 'delete':
      moderation_delete_moderation_log('node', $node->nid);
      break;
  }
}

/**
 * Implement HOOK_comment().
 */
function moderation_comment(&$a1, $op) {
  global $user;
  switch ($op) {
    case 'view':
      $comment->moderation = moderation_get_status('comment', $a1->cid);
      break;
    case 'insert':
      moderation_insert_moderation('comment', $a1['cid']);
      break;
    case 'update':
      $status = moderation_get_status('comment', $a1['cid'], 'moderate');
      if ($status != $a1['moderate']) {
        moderation_update_moderation('comment', $a1['cid'], $a1['moderate']);
        moderation_insert_moderation_log('comment', $a1['cid'], $a1['moderate'], 'moderate', $user);
      }
      break;
    case 'delete':
      moderation_delete_moderation('comment', $a1->cid);
      moderation_delete_moderation_log('comment', $a1->cid);
      break;
  }
}

/**
 * Implement HOOK_form_alter().
 */
function moderation_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && $form['type']['#value'] .'_node_form' == $form_id)  {
    if (user_access('moderate content')) {
      $form['options']['moderate'] = array(
        '#type' => 'checkbox',
        '#title' => t('Has been moderated'),
        '#default_value' => $form['#node']->moderate,
      );
    }
  }
}

/**
 * Implement HOOK_form_comment_form_alter().
 */
function moderation_form_comment_form_alter(&$form, &$form_state) {
  if (user_access('moderate content')) {
    $status = db_result(db_query("SELECT status FROM {moderation_comment_status} WHERE cid=%d", $form['cid']['#value']));
    $form['admin']['moderate'] = array(
      '#type' => 'checkbox',
      '#title' => 'Has been moderated',
      '#default_value' => $status,
      '#weight' => -1,
    );
  }
}

/**
 * Implement HOOK_theme().
 */
function moderation_theme() {
  return array(
    'moderation_node_preview' => array(
      'arguments' => array(
        'node',
      ),
    ),
    'moderation_comments_preview' => array(
      'arguments' => array(
        'node',
      ),
    ),
    'moderation_item_links' => array(
      'arguments' => array(
        'entity' => NULL,
        'entity_type' => NULL,
        'moderation' => NULL,
        'token' => NULL,
      ),
    ),
  );
}

/* Helper functions */

/**
 * Custom access callback; Menu access callback
 */
function moderation_moderation_access_callback($arg) {
  $args = array('node', 'comment', 'thread', 'flag');
  return (in_array($arg, $args) && user_access('moderate content')) ? TRUE : FALSE;
}

/**
 * Get moderation status
 */
function moderation_get_status($obj_type, $obj_id) {
  switch ($obj_type) {
    case 'comment':
      $query = "SELECT status FROM {moderation_comment_status} WHERE cid = %d";
      break;
    case 'node':
    case 'thread':
      $query  = "SELECT moderate FROM {node} WHERE nid = %d";
      break;
  }
  return db_result(db_query($query, $obj_id));
}

/**
 * Insert moderation status
 */
function moderation_insert_moderation($obj_type, $obj_id, $status = 0) {
  switch ($obj_type) {
    case 'node':
      // For your convinience
      $query = "UPDATE {node} SET status = %d WHERE nid = %d";
      break;
    case 'comment':
      $query = "INSERT INTO {moderation_comment_status} (cid, status) VALUES (%d, %d)";
      break;
  }
  return db_query($query, $obj_id, $status);
}

/**
 * Update moderation status
 */
function moderation_update_moderation($obj_type, $obj_id, $status = 0) {
  switch ($obj_type) {
    case 'node':
      $query = "UPDATE {node} SET moderate = %d WHERE nid = %d";
      break;
    case 'comment':
      $query = "UPDATE {moderation_comment_status} SET status = %d WHERE cid = %d";
      break;
  }
  return db_query($query, $status, $obj_id);
}

/**
 * Delete moderation status
 */
function moderation_delete_moderation($obj_type, $obj_id) {
  switch ($obj_type) {
    case 'node':
      // hm.
      return TRUE;
      break;
    case 'comment':
      $query = "DELETE FROM {moderation_comment_status} WHERE cid = %d";
      break;
  }
  return db_query($query, $obj_id);
}

/**
 * Insert entry into moderation log
 */
function moderation_insert_moderation_log($obj_type, $obj_id, $status, $attribute = 'moderate', $user = NULL) {
  $query = "INSERT INTO {moderation} (obj_type, obj_id, uid, attribute, status, created) VALUES ('%s', %d, %d, '%s', %d, %d)";
  return db_query($query, $obj_type, $obj_id, $user->uid, $attribute, $status, time());
}

/**
 * Delete entry from moderation log
 */
function moderation_delete_moderation_log($obj_type, $obj_id) {
  $query = "DELETE FROM {moderation} WHERE obj_type = '%s' AND obj_id = %d";
  return db_query($query, $obj_type, $obj_id);
}

/**
 * Get last entry from moderation log along with user data
 */
function moderation_get_last($obj_type, $obj_id) {
  $query = "SELECT m.*, u.* FROM {moderation} m
              LEFT JOIN {users} u ON m.uid = u.uid
              WHERE m.obj_type = '%s'
                AND m.obj_id = %d
              ORDER BY m.created DESC
              LIMIT 1";
  return db_fetch_object(db_query($query, $obj_type, $obj_id));
}

/**
 * Log messages
 */
function moderation_log_message($attribute, $status, $type) {
  switch ($attribute) {
    case 'status':
      if ($type == 'comment') {
        $message = $status ? t('Unpublished') : t('Published');
      }
      else {
        $message = $status ? t('Published') : t('Unpublished');
      }
      break;
    case 'moderate':
      $message = $status ? t('Moderated') : t('Unmoderated');
      break;
    case 'sticky':
      $message = $status ? t('Made sticky') : t('Removed stickiness');
      break;
    case 'promote':
      $message = $status ? t('Promoted') : t('Not promoted');
      break;
  }
  return $message;
}

/**
 * Display a node preview for display during node creation and editing.
 *
 * @param $node
 *   The node object which is being previewed.
 */
function theme_moderation_node_preview($node) {
  $output = '<div class="preview">' . "\n";
  if ($node->teaser && $node->teaser != $node->body) {
    $output .= '  <h3>'. t('Preview trimmed version') .'</h3>' . "\n";
    $output .= node_view(drupal_clone($node), 1, FALSE, 0);
    $output .= '  <h3>'. t('Preview full version') .'</h3>' . "\n";
    $output .= node_view($node, 0, FALSE, 0);
  }
  else {
    $output .= node_view($node, 0, FALSE, 0);
  }
  $output .= '</div>' . "\n";
  return $output;
}

/**
 * Display a node preview for display during node creation and editing.
 *
 * @param $node
 *   The node object which is being previewed.
 */
function theme_moderation_comments_preview($node) {
  $output = '<div class="thread-preview moderation-thread">' . "\n";
  $output .= '  <h3>'. t('Preview comments') .'</h3>' . "\n";
  $output .= views_embed_view('moderation', 'attachment_1') . "\n";
  $output .= '</div>' . "\n";
  return $output;
}

/**
 * Action links for moderation.
 *
 * @TODO
 *   Find a better way to have different edit links for different entity types.
 */
function theme_moderation_item_links($entity, $entity_type, $moderation, $token) {
  $output = '<div class="moderation-attribute-wrapper clear-block">' . "\n";

  if ($entity_type == 'node') {
    $edit_link = $entity_type . '/' . $entity->id .'/edit';
  }
  else {
    $edit_link = $entity_type . '/edit' . '/' . $entity->id;
  }
  $output .= '<span id="moderation-operations-'. $entity->id .'" class="moderation-attribute moderation-operations">' . "\n";
  $output .= l(t('edit'), $edit_link, array('query' => drupal_get_destination())) . "\n";
  $output .= '</span>' . "\n";

  $output .= '<span class="moderation-attribute moderation-moderate">' . "\n";
  $output .= l(($moderation ? t('unmoderate') : t('moderate')), 'moderation/'. $entity_type . '/' . $entity->id .'/set/moderate',
                array(
                  'query' => drupal_get_destination() .'&token='. $token,
                  'attributes' => array(
                    'id' => 'moderation-moderate-link-'. $entity->id,
                    'class' => 'moderation-moderate-link'
                  )
                )
              ) . "\n";
  $output .= '</span>' . "\n";
  if ($entity_type == 'node') {
    $output .= '<span class="moderation-attribute moderation-sticky">' . "\n";
    $output .= l(($entity->sticky   ? t('remove stickiness')    : t('make sticky')), 'moderation/'. $entity_type . '/' . $entity->id .'/set/sticky',
                  array(
                    'query' => drupal_get_destination() .'&token='. $token,
                    'attributes' => array(
                      'id' => 'moderation-sticky-link-'. $entity->id,
                      'class' => 'moderation-sticky-link'
                    )
                  )
                ) . "\n";
    $output .= '</span>' . "\n";
    $output .= '  <span class="moderation-attribute moderation-promote">' . "\n";
    $output .= l(($entity->promote  ? t('demote')  : t('promote')), 'moderation/'. $entity_type . '/' . $entity->id .'/set/promote',
                  array(
                    'query' => drupal_get_destination() .'&token='. $token,
                    'attributes' => array(
                      'id' => 'moderation-promote-link-'. $entity->id,
                     'class' => 'moderation-promote-link'
                    )
                  )
                ) . "\n";
    $output .= '</span>' . "\n";
  }
  if ($entity_type == 'node') {
    $status = $entity->status ? t('unpublish') : t('publish');
  }
  else {
    $status = !$entity->status ? t('unpublish') : t('publish');
  }
  $output .= '<span class="moderation-attribute moderation-status">' . "\n";
  $output .= l($status, 'moderation/'. $entity_type . '/' . $entity->id .'/set/status',
                array(
                  'query' => drupal_get_destination() .'&token='. $token,
                  'attributes' => array(
                    'id' => 'moderation-status-link-'. $entity->id,
                    'class' => 'moderation-status-link'
                  )
                )
              ) . "\n";
  $output .= '</span>' . "\n";
  $output .= '</div>' . "\n";

  return $output;
}

