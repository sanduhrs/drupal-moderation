<?php

// Currently we have some problems with these entities, because they have not be
// fully converted into "real" entities.
define('NOT_YET_SUPPORTED_ENTITIES', serialize(array('user', 'taxonomy_term', 'taxonomy_vocabulary', 'file')));

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function moderation_entity_info() {
  $return['moderation'] = array(
    'label' => t('Moderation'),
    // The entity class and controller class extend the classes provided by the
    // Entity API.
    'entity class' => 'Moderation',
    'controller class' => 'EntityAPIController',
    'base table' => 'moderation',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'moderation_id',
      'bundle' => 'type',
    ),
    // Bundles are defined by the moderation types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle
    // objects.
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'moderation_create',
    'module' => 'moderation',
  );
  // The entity that holds information about the entity types.
  $return['moderation_type'] = array(
    'label' => t('Moderation Type'),
    'entity class' => 'ModerationType',
    'controller class' => 'ModerationTypeController',
    'base table' => 'moderation_type',
    'fieldable' => FALSE,
    'bundle of' => 'moderation',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'moderation_type_access',
    'module' => 'moderation',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/moderation_types',
      'file' => 'moderation_type.admin.inc',
      'controller class' => 'ModerationTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implementation of hook_entity_info_alter().
 *
 * We are adding the info about the moderation types via a hook to avoid a
 * recursion issue as loading the moderation types requires the entity info as
 * well.
 *
 */
function moderation_entity_info_alter(&$entity_info) {
  foreach (moderation_get_types() as $type => $info) {
    $entity_info['moderation']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/moderation_types/manage/%moderation_type',
        'real path' => 'admin/structure/moderation_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer moderation types'),
      ),
    );
  }
}

/**
 * Implementation of hook_permission().
 * NTH: Permissions per action.
 */
function moderation_permission() {
  $permissions = array(
    'administer moderation types' => array(
      'title' => t('Administer moderation types'),
      'description' => t('Create and delete moderation types, and set their permissions.'),
    ),
  );

  //Generate permissions per moderation.
  foreach (moderation_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "use $type_name" => array(
        'title' => t('Use the %type_name moderation queue.', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Access callback for the entity API.
 */
function moderation_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer moderation types', $account);
}

/**
 * Gets an array of all moderation types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ModerationType[]
 *   Depending whether $type isset, an array of moderation types or a single
 *   one.
 */
function moderation_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('moderation_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Menu argument loader; Load a moderation type by string.
 *
 * @param $type
 *   The machine-readable name of a moderation type to load.
 * @return
 *   A moderation type array or FALSE if $type does not exist.
 */
function moderation_type_load($type) {
  return moderation_get_types($type);
}

/**
 * Fetch a moderation object. Make sure that the wildcard you choose
 * in the moderation entity definition fits the function name here.
 *
 * @param $moderation_id
 *   Integer specifying the moderation id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $moderation object or FALSE if it cannot be loaded.
 *
 * @see moderation_load_multiple()
 */
function moderation_load($moderation_id, $reset = FALSE) {
  $moderations = moderation_load_multiple(array($moderation_id), array(), $reset);
  return reset($moderations);
}

/**
 * Load multiple moderations based on certain conditions.
 *
 * @param $moderation_ids
 *   An array of moderation IDs.
 * @param $conditions
 *   An array of conditions to match against the {moderation} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of moderation objects, indexed by moderation_id.
 *
 * @see entity_load()
 * @see moderation_load()
 */
function moderation_load_multiple($moderation_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('moderation', $moderation_ids, $conditions, $reset);
}

/**
 * Deletes a moderation.
 */
function moderation_delete(Moderation $moderation) {
  $moderation->delete();
}

/**
 * Delete multiple moderations.
 *
 * @param $moderation_ids
 *   An array of moderation IDs.
 */
function moderation_delete_multiple(array $moderation_ids) {
  entity_get_controller('moderation')->delete($moderation_ids);
}

/**
 * Create a moderation object.
 */
function moderation_create($values = array()) {
  return entity_get_controller('moderation')->create($values);
}

/**
 * Saves a moderation to the database.
 *
 * @param $moderation
 *   The moderation object.
 */
function moderation_save(Moderation $moderation) {
  return $moderation->save();
}

/**
 * Saves a moderation type to the db.
 */
function moderation_type_save(ModerationType $type) {
  $type->save();
}

/**
 * Deletes a moderation type from the db.
 */
function moderation_type_delete(ModerationType $type) {
  $type->delete();
}

/**
 * Implementation of hook_views_api().
 */
function moderation_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'moderation') . '/views',
  );
}

/**
 * Implementation of hook_init().
 */
function moderation_init() {
  // Include tje action.inc files.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    module_load_include('inc', 'moderation', 'modules/' . $entity_type . '.action');
  }
}

/**
 * Implementation of hook_menu().
 */
function moderation_menu() {
  $items = array();

  $items['admin/moderations'] = array(
    'title' => 'Moderations',
    'description' => 'Add edit and update moderations.',
    'page callback' => 'moderation_parent_menu_callback',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 9,
  );

  $items['moderation_ajax_actions_callback/%/%/%'] = array(
    'page callback' => 'moderation_ajax_actions_callback',
    'page arguments' => array(1, 2, 3, 4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['moderation_entity_view/%/%/%'] = array(
    'page callback' => 'moderation_entity_view',
    'page arguments' => array(1, 2, 3, 4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Ajax callback for moderation actions.
 *
 * @param $type
 *   The type sould be ajax, otherwise the function will not be loaded.
 * @param $event
 *   A string holding the rules event to be executed.
 * @param $entity_type
 *   The entity_type of the moderated entity.
 * @param $entity_id
 *   The entity_id of the moderated entity.
 */
function moderation_ajax_actions_callback($type = 'ajax', $event, $entity_type, $entity_id) {
  // TODO: we should check whether the entity_type exists or not.
  if ($type == 'ajax' && drupal_valid_token($_GET['token'], 'moderation_request')) {
    // Give other modules the opertunity to work with this action callback.
    module_invoke_all('moderation_preaction', $event, $entity_type, $entity_id);
    // Load the entity by type and id.
    $entity = call_user_func($entity_type . '_load', $entity_id);
    // Execute the rule. The rule expects entity_metadata_warpper to work.
    rules_invoke_event($event, entity_metadata_wrapper($entity_type, $entity));

    // Check whether there is a custom label callback. Otherwise the default is
    // used.
    $actions = moderation_action_list($entity_type);
    foreach ($actions as $action_id => $action) {
      if ($action['event'] == $event) {
        $label = isset($action['label callback']) ? call_user_func($action['label callback'], $action, $entity_type, $entity_id) : moderation_action_label($action, $entity_type, $entity_id);
        break;
      }
    }

    $commands = array();
    // Prepare the new link, wich will replace the triggered one.
    $link = '<span id="moderation_action_' . $entity_id . '_' . $event . '">' . l($label, 'moderation_ajax_actions_callback/nojs/' . $event . '/' . $entity_type . '/' . $entity_id, array('attributes' => array('class' => array('use-ajax', 'action')), 'query' => array('token' => drupal_get_token('moderation_request')))) . '</span>';
    $commands[] = ajax_command_replace('#moderation_action_' . $entity_id . '_' . $event, $link);

    // TODO: Close the moderation_view when using the moderaion_on_moderate event.
    // if($event == 'moderation_on_moderate') {
    //   $commands[] = ajax_command_replace('.moderation_title_wrapper', '<div class="moderation_title_wrapper"></div>');
    // }

    $page = array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
    ajax_deliver($page);
  }
  else {
    return drupal_access_denied();
  }
}

/**
 *
 * @param $entity_action_type
 *   Optional entity_type to get the declared actions.
 * @return array
 *   Associative array sort by entity_type.
 */
function moderation_action_list($entity_action_type = null) {

  $moderation_actions = &drupal_static(__FUNCTION__);
  if (!isset($moderation_actions)) {
    $moderation_actions = module_invoke_all('moderation_action_info');
    drupal_alter('moderation_action_info', $actions);
  }

  // Check for global actions, to make them available to every entity.
  if (isset($moderation_actions['every_entity'])) {
    $every_entity = $moderation_actions['every_entity'];
    unset($moderation_actions['every_entity']);
    foreach (field_info_bundles() as $entity_type => $entity_bundles) {
      foreach ($every_entity as $key => $value) {
        $moderation_actions[$entity_type][$key] = $value;
      }
    }
  }
  // If $entity_action_type is set, return the entity specific actions.
  if (isset($entity_action_type)) {
    return $moderation_actions[$entity_action_type];
  }

  return $moderation_actions;
}

/**
 * Generic label callback for action links. It can be used to get a single label
 * or a composed string of all labels defined in hook_moderation_action_info().
 *
 * @param $action
 *   The action id.
 * @param $entity_type
 *   The entity_type of the entity.
 * @param $entity_id
 *   Optional entity_id to get the single label for a particular entity.
 * @return string
 *   The label string.
 */
function moderation_action_label($action, $entity_type, $entity_id = null) {
  if (isset($entity_id)) {
    $data = $action['label data']['data'];
    $entity = reset(entity_load($entity_type, array($entity_id)));

    foreach ($action['label data']['labels'] as $condition => $label) {
      if ($condition == $entity->{$data}) {
        return $label;
      }
    }
  }
  else {
    $output = '';
    foreach ($action['label data']['labels'] as $condition => $label) {
      $output .= $label . ' | ';
    }
    return substr($output, 0, -2);
  }
}

/**
 * Callback for moderation_handler_entity_field_label().
 *
 * @param $type
 *   The type sould be ajax, otherwise the function will not be loaded.
 * @param $entity_type
 *   The entity_type of the previewed entity.
 * @param $entity_id
 *   The entity_id of the previewed entity.
 */
function moderation_entity_view($type = 'ajax', $entity_type, $entity_id, $moderation_type) {
  if ($type == 'ajax') {
    $output = '<div id="title_' . $entity_id . '_content"><div class="moderation_title_wrapper">';

    // Load the entity to be previewed.
    $entity = call_user_func($entity_type . '_load', $entity_id);
    $entities = array($entity);

    // Get entity info to check if the entity has the expected view_modes.
    $entity_info = entity_get_info($entity_type);

    // Add teaser to output if existing.
    if (isset($entity_info['view modes']['teaser'])) {
      $entity_view = entity_view($entity_type, $entities, $view_mode = 'teaser', $langcode = NULL, $page = NULL);
      $output .= render($entity_view);
    }
    // Add full view to output if existing.
    if (isset($entity_info['view modes']['full'])) {
      $entity_view = entity_view($entity_type, $entities, $view_mode = 'full', $langcode = NULL, $page = NULL);
      $output .= render($entity_view);
    }

    $moderation_type_info = moderation_get_types($moderation_type);
    $comment_queue = isset($moderation_type_info->data['container']['comment_queue_container']['comment_queue']);
    if($comment_queue) {
      $moderation_type_comment_queue_info = moderation_get_types($moderation_type_info->data['container']['comment_queue_container']['comment_queue']);
      $output .= views_embed_view('moderations', 'page_' . $moderation_type_comment_queue_info->type, $entity_id);
    }

    $output .= '</div></div>';

    $commands = array();
    // Append preview content.
    // TODO: Toggle entity when clicking on the title.
    // $commands[] = ajax_command_remove('.moderation_title_wrapper');
    $commands[] = ajax_command_replace('#title_' . $entity_id . '_content', $output);
    $page = array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
    ajax_deliver($page);
  }
}

/**
 * Callback for moderation menu item.
 */
function moderation_parent_menu_callback() {
  if (moderation_get_types()) {
    drupal_goto('admin/moderations/' . reset(moderation_get_types())->type);
  }
  else {
    return t('There have no moderation entities been created yet. You can create a new moderation entities <a href="@base_pathadmin/structure/moderation_types">here</a>.', array('@base_path' => base_path()));
  }
}

/**
 * The class used for moderation entities
 */
class Moderation extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'moderation');
  }

  protected function defaultLabel() {
    return $this->name;
  }

}

/**
 * The class used for moderation type entities
 */
class ModerationType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'moderation_type');
  }

}

/**
 * The Controller for Moderation entities
 */
class ModerationTypeController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

}
